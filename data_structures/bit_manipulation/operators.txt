https://wiki.python.org/moin/BitwiseOperators

& 
---------
> bitwise and
> Each bit of the output is 1 if the corresponding bit of x AND of y is 1, otherwise it's 0.
> ex) 
        0 & 0 => 0 
        0 & 1 => 0 
        1 & 0 => 0 
        1 & 1 => 1

| 
---------
> bitwise or
> Each bit of the output is 0 if the corresponding bit of x AND of y is 0, otherwise it's 1.
> ex) 
        0 & 0 => 0 
        0 & 1 => 1 
        1 & 0 => 1 
        1 & 1 => 1

^
---------
> bitwise exclusive or
> Each bit of the output is the same as the corresponding bit in x if that bit in y is 0, and it's the complement of the bit in x if that bit in y is 1.
> ex) 
        0 & 0 => 0 
        0 & 1 => 1 
        1 & 0 => 1 
        1 & 1 => 0

~
---------
> negation operation
> Returns the complement of x - the number you get by switching each 1 for a 0 and each 0 for a 1. This is the same as -x - 1.
> ex) 
        0 => 1
        1 => 0


x << y
---------
> Left shitf 
> shifts the bits of a binary number to the left by a specified number of positions 
> this operation is equivalent to multiplying the number by 2 raised to the power of the shift amount 
> 001 << 1 --> 010
> 010 << 1 --> 100
> 100 << 1 --> 000



x >> y
---------
> Right shift 
> Shifts bits of a binary number to the right by a specified number of positions 
> Equivalent to dividing the number by 2 raised to the power of the shift amount
> if we have an odd number, we will round down 
> ex) 100 >> 1 --> 010
> ex) 010 >> 1 --> 001
> ex) 001 >> 1 --> 000