Full Tree:      each node either points to 0 or 2 children. no single children (assuming a binary tree)
Perfect Tree:   the bottom level is full of children 
Complete Tree:  no gaps from left to right on the bottom level. 
Leaf:           a node with no children 
Non-leaf:       a node with even a single child, either left or right or both


binary tree node pointers can only point in one direction. As such, cycles are not allowed in binary trees.
> all nodes to right of root must be greater than root
> all nodes to left of root must be less than root

binary search tree: the values of each number are places in order 
    O(log(n))

DFS 
    > Depth-first search 
    > The algorithm starts at the root node and explores as far as possible along each branch before backtracking.
    > uses a stack 

BFS 
    > Breadth-first search
    > It starts at the tree root and explores all nodes at the present depth prior to moving on to the nodes at the next depth level.
    > uses a stack 
    

maximum depth of binary tree 
    > the number of nodes along the longest path from the root node down to the farthest leaf node.

diameter
    > the length of the longest path between any two nodes in a tree. this path may or may not pass through the root 
    > note: the length of path between two nodes is represented by the number of edges (links) between them 

height 
    > number of layers between root and most bottom leaf node 

Ancestor
    > A node connected to all of the nodes below it is considered an ancestor to those nodes.

Descendent
    > either child of the node or child of some other descendent of the node.

Balanced
    > Balanced binary tree means that the height of the left-subtree is equal to the height of the right-subtree, or there is a difference of 1.
    > In a balanced tree, we can eliminate half the nodes each time, which results in O(log n), for reasons we discussed in the merge sort chapter.

